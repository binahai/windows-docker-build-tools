# escape=`

# Based on https://docs.microsoft.com/en-us/visualstudio/install/build-tools-container?view=vs-2019

ARG DOTNET_SDK_VERSION="4.8"
ARG CMAKE_VERSION="3.18.2"
ARG PYTHON_VERSION="3.8.6"

# Use the latest Windows Server Core image with .NET Framework 4.8.
FROM mcr.microsoft.com/dotnet/framework/sdk:${DOTNET_SDK_VERSION}-windowsservercore-ltsc2019

ENV BUILDING_INSIDE_DOCKER true

# Restore the default Windows shell for correct batch processing.
SHELL ["cmd", "/S", "/C"]

# Download the Build Tools bootstrapper.
ADD https://aka.ms/vs/16/release/vs_buildtools.exe C:\TEMP\vs_buildtools.exe

# Install Build Tools with the Microsoft.VisualStudio.Workload.AzureBuildTools workload, excluding workloads and components with known issues.
RUN C:\TEMP\vs_buildtools.exe --quiet --wait --norestart --nocache `
    --installPath C:\BuildTools `
    --add Microsoft.VisualStudio.Component.Windows10SDK.18362`
    --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
    --remove Microsoft.VisualStudio.Component.Windows10SDK.10240 `
    --remove Microsoft.VisualStudio.Component.Windows10SDK.10586 `
    --remove Microsoft.VisualStudio.Component.Windows10SDK.14393 `
    --remove Microsoft.VisualStudio.Component.Windows81SDK `
    || IF "%ERRORLEVEL%"=="3010" EXIT 0 `
    # Cleanup
    && del /q vs_buildtools.exe

RUN nuget config

ARG CMAKE_VERSION
ARG PYTHON_VERSION

# Install chocolatey and some tools
RUN @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin" && `
    choco install -y --no-progress --limitoutput visualstudio2019-workload-vctools unzip llvm git vim && `
    choco install -y --no-progress --limitoutput cmake --version="${CMAKE_VERSION}" --installargs 'ADD_CMAKE_TO_PATH=System' && `
    choco install -y --no-progress --limitoutput python3 --version="${PYTHON_VERSION}"

LABEL `
    windows.buildtools="true" `
    windows.buildtools.python_version="${PYTHON_VERSION}" `
    windows.buildtools.cmake_version="${CMAKE_VERSION}" `
    keep="true"

# Define the entry point for the docker container.
# This entry point starts the developer command prompt and launches the PowerShell shell.
ENTRYPOINT ["C:\\BuildTools\\Common7\\Tools\\VsDevCmd.bat", "&&", "powershell.exe", "-NoLogo", "-ExecutionPolicy", "Bypass"]